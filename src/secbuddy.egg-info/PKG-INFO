Metadata-Version: 2.4
Name: secbuddy
Version: 0.1.0
Summary: A beginner-friendly cybersecurity helper CLI with Codex-like UX
Author: Your Name
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Provides-Extra: dev
Requires-Dist: pytest>=7.4; extra == "dev"
Requires-Dist: pytest-cov>=4.1; extra == "dev"
Requires-Dist: ruff>=0.6.9; extra == "dev"
Requires-Dist: mypy>=1.11; extra == "dev"
Requires-Dist: types-setuptools; extra == "dev"

# SecBuddy

A minimal, beginner-friendly cybersecurity helper CLI inspired by Codex CLI’s flow and hackingBuddyGPT, but simplified for students. It provides structured prompts, checklists, and quick references for common tasks (recon, web, crypto, forensics) and a conversational helper.

---

## Quickstart

- python -m venv .venv && source .venv/bin/activate
- pip install -e .[dev]
- make run  # or: python -m secbuddy

## Features
- `secbuddy guide` – interactive helper with tips and commands.
- `secbuddy checklist` – quick task lists for common categories.
- `secbuddy prompt` – prints a starter system prompt for LLMs.

## Docs & Config

- docs/getting-started.md
- docs/config.md

### Enable AI answers (optional)

Create `~/.secbuddy/config.toml`:

```
ai.enabled = true
ai.provider = "openai" # or "claude", "gemini" (future)
openai.api_key = "sk-..."
openai.model = "gpt-4o-mini"
approvals.require_exec = true
history.enabled = true
approvals.ai_consent = false   # require --send to use AI
ai.enabled = false             # set true to enable AI provider
ai.provider = "openai"         # or claude, gemini, custom
```

Without `ai.enabled`, SecBuddy uses built-in heuristics.

## Roadmap
- Add persistence for sessions/history.
- Add templates for CTF task types and writeups.
- Add plugins for tools (nmap, gobuster) with safe defaults.
